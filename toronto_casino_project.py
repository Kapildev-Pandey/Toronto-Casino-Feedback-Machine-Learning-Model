# -*- coding: utf-8 -*-
"""Toronto_Casino_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y5PVcj3r-9AZ4PNGpu7WyeMUcs7Mm8Gv

### Toronto City Council’s Executive Committee has requested the City Manager seek the public’s input on the establishment of a new casino in Toronto.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from google.colab import files
upload=files.upload()

casino=pd.read_csv('/content/casino_survey_results20130325.csv')
casino.head(10)

casino.dtypes

"""#Observation :
1) Our data is mostly non-numeric data.

2)There is lot of Nan value in our data.

3)It is based on mulitcategorical data

# Removing columns which based on what and why?(Personal Rersponse Questions) 
As they already responsed regarding the following questions hence we know whether they are supporting or not hence removing the why they supporting or not that's another case

Q1.b)What are your main reasons for this rating? ie. 'Q1_B1', 'Q1_B2', 'Q1_B3'<br>
Q2.b)Why? ie. 'Q2_B'<br>
Q6.Why? ie. 'Q6_Comments'<br>
Q7.a)Downtown area:What are your main reasons for this rating? ie.'Q7_A1', 'Q7_A2', 'Q7_A3'<br>
Q7.b)Exhibition Place:What are your main reasons for this rating? ie.'Q7_B1','Q7_B2', 'Q7_B3',<br>
Q7.c)Port Lands:What are your main reasons for this rating? ie.'Q7_C1', 'Q7_C2', 'Q7_C3'<br>
Q8.)Woodbine Racetrack:What are your main reasons for this rating? ie.'Q8_B1','Q8_B2', 'Q8_B3'<br>
"""

casino.drop(['Q1_B1', 'Q1_B2', 'Q1_B3','Q2_B','Q7_A1', 'Q7_A2', 'Q7_A3','Q7_B1','Q7_B2', 'Q7_B3',
            'Q7_C1', 'Q7_C2', 'Q7_C3','Q8_B1','Q8_B2', 'Q8_B3'],axis=1,inplace = True)  
casino.drop(['Q9_Considerations'],axis=1,inplace = True)  
casino.drop(['Q10','Unnamed: 92', 'Unnamed: 93','Q7_C_J_Other','Q7_B_J_Other','Q7_A_J_Other','Q3_Q_Other'],axis=1,inplace = True)  
casino.drop(['GroupName', 'DateCreated','PostalCode','Q6_Comments','Q3_Comments'],axis=1,inplace = True)  
casino.drop(['SurveyID'],axis=1,inplace = True)          #Removing Survey ID(Serial Number)
casino.shape

"""#Is there any missing values in the columns ?

Except few columns there are missing values in our dataset .

zero means there are no missing values.
"""

print('Displaying All The Missing Values:')
for i in range(len(casino.columns)):           
    if casino[casino.columns[i]].isnull().sum()!=0:
        print(casino.columns[i],'=',casino[casino.columns[i]].isnull().sum())

"""# Case1:What if I Remove all the missing values in columns?

Without any treatment only removing all the rows has missing values
"""

casino.dropna(inplace=True)                   #Removing all rows whose having missing values

casino.shape                                             #original=(17766, 94)

"""#Conclusion:#
There is lots data has been gone more than 50percent of data we lost and making a molde on basis of data is not good idead
"""

casino.describe()

"""From here onward we will see the feedback form questions and there pi-chart which will give idea immediately about data pattern"""

import matplotlib.pyplot as plt

areab=['Q9', 'Q11']

place=['I do not support a new casino under any conditions','Personal Info']

# Data to plot
for j in range(len(areab)):
    labels = [casino[areab[j]].unique()[i] for i in range(len(casino[areab[j]].unique()))]
    sizes = [casino[areab[j]].value_counts()[i] for i in range(len(casino[areab[j]].unique()))]
    
    colors = ['gold', 'yellowgreen']
    explode = (0.1, 0)  # explode 1st slice
    # Plot
    plt.pie(sizes, explode=explode, labels=labels, colors=colors,
            autopct='%1.1f%%', shadow=True, startangle=140,)
    plt.axis('equal')
    total = sum(sizes)
    print()
    plt.title(place[j])
    plt.legend(
        loc='upper right',
        labels=['%s, %1.1f%%' % (
            l, (float(s) / total) * 100) for l, s in zip(labels, sizes)],
        prop={'size': 11},
        bbox_to_anchor=(0.0, 1),
        )
    plt.show()

"""#Case 2:
After Processing the data

#Missing Value Treatment
As the each  variable  contains lots of missing we value we will see the treatment of each variable

#Q1_A
It contains only one missing value hence replacing with high occured response entry make doesn't any harm
"""

variable_name='Q1_A'
casino[variable_name]=casino[variable_name].replace(np.NaN,'Strongly Opposed')
casino['Q1_A'].value_counts()

"""#Q2_A

1)As we have 17766 rows we but  we can see there is missing entries

2)By using the crostab we will see the distribution proption  of each entry with respect to their varible with target variable 

3)So that we can treat missing values on basis of their distribution with repsect True and False.

4)This method we will use th treat all variable
"""

cross_demo=pd.crosstab(casino['Q2_A'], casino['Q9'], margins=True).T
cross_demo

variable_name='Q2_A'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)
print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo

print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[0])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q3_A"""

variable_name='Q3_A'
#variable_name='Q8_A1'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[3])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q3_B"""

variable_name='Q3_B'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[3])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q3_C"""

variable_name='Q3_C'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[cross_demo.shape[1]-2])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""# Q3_D"""

variable_name='Q3_D'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
#casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[3])
#df.fillna(value=cross_demo.keys()[i], limit=1)
casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[1], limit=71)
casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[2], limit=79)
casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[3], limit=681)
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q3_E"""

variable_name='Q3_E'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[cross_demo.shape[1]-2])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q3_F"""

variable_name='Q3_F'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[1], limit=132)
casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[2], limit=69)
casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[3], limit=651)

print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q3_G"""

variable_name='Q3_G'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[cross_demo.shape[1]-2])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q3_H"""

variable_name='Q3_H'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[cross_demo.shape[1]-2])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q3_I"""

variable_name='Q3_I'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[cross_demo.shape[1]-2])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q3_J"""

variable_name='Q3_J'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[1], limit=25)
casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[2], limit=52)
casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[3], limit=756)

print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q3_K"""

variable_name='Q3_K'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break

casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[1], limit=150)
casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[2], limit=69)
casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[3], limit=617)

print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q3_L"""

variable_name='Q3_L'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[cross_demo.shape[1]-2])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q3_M"""

variable_name='Q3_M'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[cross_demo.shape[1]-2])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q3_N"""

variable_name='Q3_N'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[cross_demo.shape[1]-2])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q3_O"""

variable_name='Q3_O'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[cross_demo.shape[1]-2])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q3_P"""

variable_name='Q3_P'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[cross_demo.shape[1]-2])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q3_Q"""

variable_name='Q3_Q'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[cross_demo.shape[1]-2])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q4_A"""

variable_name='Q4_A'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[1], limit=121)
casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[2], limit=7)

print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q5"""

variable_name='Q5'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break


casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[3], limit=148)
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q6"""

variable_name='Q6'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[cross_demo.shape[1]-2])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q7_A_StandAlone"""

variable_name='Q7_A_StandAlone'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[cross_demo.shape[1]-2])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q7_A_Integrated"""

variable_name='Q7_A_Integrated'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[4], limit=7)
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q7_B_StandAlone"""

variable_name='Q7_B_StandAlone'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[0], limit=3)
casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[4], limit=174)
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q7_B_Integrated"""

variable_name='Q7_B_Integrated'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[cross_demo.shape[1]-2])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q7_C_StandAlone"""

variable_name='Q7_C_StandAlone'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[cross_demo.shape[1]-2])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q7_C_Integrated"""

variable_name='Q7_C_Integrated'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[cross_demo.shape[1]-2])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q8_A1"""

variable_name='Q8_A1'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[cross_demo.shape[1]-2])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Q8_A2"""

variable_name='Q8_A2'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break
casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[cross_demo.shape[1]-2])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

"""#Age"""

variable_name='Age'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break

casino[variable_name]=casino[variable_name].replace(np.NaN,cross_demo.keys()[cross_demo.shape[1]-2])
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

casino[variable_name].replace(' ', np.nan, inplace=True)

casino[variable_name].value_counts()

print(casino[variable_name].isnull().sum())
casino[variable_name]=casino[variable_name].fillna(value='45-54', limit=474)
casino[variable_name]=casino[variable_name].fillna(value='25-34', limit=467)
casino[variable_name]=casino[variable_name].fillna(value='35-44', limit=463)
casino[variable_name]=casino[variable_name].fillna(value='55-64', limit=389)
casino[variable_name]=casino[variable_name].fillna(value='65 or older', limit=196)
casino[variable_name]=casino[variable_name].fillna(value='Prefer not to disclose', limit=106)
casino[variable_name]=casino[variable_name].fillna(value='15-24' ,limit=90)
casino[variable_name]=casino[variable_name].fillna(value='Under 15' ,limit=11)
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())

"""#Gender"""

variable_name='Gender'
cross_demo=pd.crosstab(casino[variable_name], casino['Q9'], margins=True).T
print(casino[variable_name].value_counts())
print('Shape of crosstab:',cross_demo.shape[1])
print('--------------------------------------------------------------------------')
print(casino[variable_name].isnull().sum())
print('All true value: ',cross_demo.iloc[0][cross_demo.shape[1]-1])           #accesing the All the true value 
print('All false value: ',cross_demo.iloc[1][cross_demo.shape[1]-1])           #accesing the All the false value
print('--------------------------------------------------------------------------')
true=np.round((cross_demo.iloc[0][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable True for missing values: ',true)
print('--------------------------------------------------------------------------')
false=np.round((cross_demo.iloc[1][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())
print('All Avaiable False for missing values: ',false)

print('--------------------------------------------------------------------------')
for i in [0 ,1]:
  for j in range(cross_demo.shape[1]-1):
    print(cross_demo.keys()[j],':',
          np.round((cross_demo.iloc[i][j]/cross_demo.iloc[i][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-i][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*casino[variable_name].isnull().sum())))
  print('--------------------------------------------------------------------------')
cross_demo


print(casino[variable_name].value_counts())
print('-----------------------------------------------------------------------------------')
Missing_value=casino[variable_name].isnull().sum()
print('-----------------------------------------------------------------------------------')
for k in range(2):
  a=0
  for i in range(cross_demo.shape[1]-1):
    a=0
    for j in range(17766):
      if casino[variable_name].loc[j] in [np.nan]:
        if casino['Q9'].loc[j]==casino['Q9'].unique()[1-k]:       
          casino[variable_name].loc[j]=cross_demo.keys()[i]
          a=a+1
          if(a==np.round((cross_demo.iloc[k][i]/cross_demo.iloc[k][cross_demo.shape[1]-1])*np.round((cross_demo.iloc[1-k][cross_demo.shape[1]-1]/cross_demo.iloc[2][cross_demo.shape[1]-1])*Missing_value))):
            break

casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[2], limit=76)
casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[3], limit=9)
casino[variable_name]=casino[variable_name].fillna(value=cross_demo.keys()[4], limit=1)
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())
cross_demo

casino[variable_name].replace(' ', np.nan, inplace=True)

print(casino[variable_name].value_counts())
casino[variable_name].isnull().sum()

print(casino[variable_name].isnull().sum())
casino[variable_name]=casino[variable_name].fillna(value='Male', limit=1129)
casino[variable_name]=casino[variable_name].fillna(value='Female', limit=973)
casino[variable_name]=casino[variable_name].fillna(value='Prefer not to disclose', limit=104)
casino[variable_name]=casino[variable_name].fillna(value='Transgendered', limit=5)
print(casino[variable_name].value_counts())
print(casino[variable_name].isnull().sum())

print('Displaying All The Missing Values:')
for i in range(len(casino.columns)):           
    if casino[casino.columns[i]].isnull().sum()!=0:
        print(casino.columns[i],'=',casino[casino.columns[i]].isnull().sum())

for i in range(casino.shape[1]):                #Checking missing is there any missing value left
    print('-------------------------------------------')
    print(casino[casino.columns[i]].value_counts(),'          ','Missing Value=',casino[casino.columns[i]].isnull().sum())

"""#One Hot Encoding"""

#Code for one hot encoding ,making dummies of data

casino_data=pd.get_dummies(casino,columns=['Q1_A', 'Q2_A', 'Q3_A', 'Q3_B', 'Q3_C', 'Q3_D', 'Q3_E',
       'Q3_F', 'Q3_G', 'Q3_H', 'Q3_I', 'Q3_J', 'Q3_K', 'Q3_L', 'Q3_M', 'Q3_N',
       'Q3_O', 'Q3_P', 'Q3_Q', 'Q4_A', 'Q5', 'Q6', 'Q7_A_StandAlone',
       'Q7_A_Integrated', 'Q7_A_A', 'Q7_A_B', 'Q7_A_C', 'Q7_A_D', 'Q7_A_E',
       'Q7_A_F', 'Q7_A_G', 'Q7_A_H', 'Q7_A_I', 'Q7_A_J', 'Q7_B_StandAlone',
       'Q7_B_Integrated', 'Q7_B_A', 'Q7_B_B', 'Q7_B_C', 'Q7_B_D', 'Q7_B_E',
       'Q7_B_F', 'Q7_B_G', 'Q7_B_H', 'Q7_B_I', 'Q7_B_J', 'Q7_C_StandAlone',
       'Q7_C_Integrated', 'Q7_C_A', 'Q7_C_B', 'Q7_C_C', 'Q7_C_D', 'Q7_C_E',
       'Q7_C_F', 'Q7_C_G', 'Q7_C_H', 'Q7_C_I', 'Q7_C_J', 'Q8_A1', 'Q8_A2',
       'Q9', 'Q11', 'Age', 'Gender'],drop_first = True)          #for one hot encoding
casino_data.head(10)

import copy 
casino_data_copy=copy.copy(casino_data)
casino_data_copy.head(10)

"""#Building Model

## Linear Regression:
### Since the data is multi-categorical data we can't use the Linear Regression Here ,We will directly start from Logistics

#Logistic Model
"""

from sklearn.linear_model import LogisticRegression
logistic1= LogisticRegression()

casino_data.columns

"""Making statistical summary table of whole data variablw with target variable 'Q9_T'"""

import statsmodels.api as sm
#from sklearn.model_selection import train_test_split,cross_val_predict
features=list(casino_data_copy.drop(['Q9_T'],axis=1).columns)
X=casino_data_copy[features]
X=sm.add_constant(X)
Y=casino_data_copy['Q9_T']
Y=Y.astype('int')
model=sm.Logit(Y,X)
fitted=model.fit()
fitted.summary2()

"""Displaying Highest p-value"""

LRresult=fitted.summary2().tables[1]
print(sorted(list(LRresult[LRresult['P>|z|']>0.05].index)[1:])[0])

import statsmodels.api as sm
#from sklearn.model_selection import train_test_split,cross_val_predict

pvalue_list_empty=[]

target_variable='Q9_T'
pvalue_list_empty.append(target_variable)

while True:
    features=list(casino_data_copy.drop(pvalue_list_empty,axis=1).columns)
    X=casino_data_copy[features]
    X=sm.add_constant(X)
    Y=casino_data_copy[target_variable]
    Y=Y.astype('int')

    model=sm.Logit(Y,X)
    fitted=model.fit()

    LRresult=fitted.summary2().tables[1]
    pvalue_list_empty.append(sorted(list(LRresult[LRresult['P>|z|']>0.05].index)[1:])[0])
    print(sorted(list(LRresult[LRresult['P>|z|']>0.05].index)[1:])[0])
    print(pvalue_list_empty)
    fitted.summary2().tables[1]

"""Displayig all high p-values"""

pvalue_list_empty

"""Removing the target variable as we don't need it in p-value list"""

pvalue_list_empty.remove('Q9_T')
pvalue_list_empty

high_p_value=pvalue_list_empty
len(high_p_value)

casino_data.drop(high_p_value,axis=1,inplace=True)

casino_data.head(10)

"""VIF:

1)Calculating VIF score

2)Removing the variable whose VIF score is more than 5.
"""

import statsmodels.formula.api as sm

def vif_cal(input_data, dependent_col):
    x_vars=input_data.drop([dependent_col], axis=1)
    xvar_names=x_vars.columns
    for i in range(0,xvar_names.shape[0]):
        y=x_vars[xvar_names[i]] 
        x=x_vars[xvar_names.drop(xvar_names[i])]
        rsq=sm.ols(formula="y~x", data=x_vars).fit().rsquared  
        vif=round(1/(1-rsq),2)
        print (xvar_names[i], " VIF = " , vif)

#Calculating VIF values using that function
vif_cal(input_data=casino_data, dependent_col="Q9_T")

casino_data.drop(['Q1_A_Strongly Opposed','Q1_A_Strongly in Favour','Q2_A_Fits Image Perfectly'],axis=1,inplace=True)
casino_data.drop(['Q5_I do not support a new casino under any conditions'],axis=1,inplace=True)

"""#Splitting the data in train and test using sklearn package

Train size=80%  and Test Size=20%
"""

from sklearn.model_selection import train_test_split,cross_val_predict
X_train, X_test, y_train, y_test = train_test_split(casino_data.drop(['Q9_T'],axis=1), casino_data['Q9_T'], test_size=0.2)

"""#Accuracy on logistic test data"""

#On Test Data

#Predicting using Logistic Regression for Binary classification

from sklearn.linear_model import LogisticRegression
logmodel = LogisticRegression()
logmodel.fit(X_train,y_train)
test_pred=logmodel.predict(X_test)
#y_pred = logmodel.predict(X_test)
from sklearn.metrics import classification_report
print('Classification Report')
print(classification_report(y_test,test_pred))
print('------------------------------------------------------------------------------------------------')


from sklearn.metrics import confusion_matrix
print('Confusion Matrix')
print(confusion_matrix(y_test, test_pred))             #Confusion metrics    test_pred=y_predict
print('------------------------------------------------------------------------------------------------')


tn, fp, fn, tp = confusion_matrix(y_test, test_pred).ravel()
print("True Negatives: ",tn)
print("False Positives: ",fp)
print("False Negatives: ",fn)
print("True Positives: ",tp)
print('------------------------------------------------------------------------------------------------')
#Accuracy
Accuracy = (tn+tp)*100/(tp+tn+fp+fn) 
print("Accuracy: {:0.2f}%".format(Accuracy))

#Precision 
Precision = tp/(tp+fp) 
print("Precision: {:0.2f}".format(Precision))

#Recall 
Recall = tp/(tp+fn) 
print("Recall: {:0.2f}".format(Recall))

#F1 Score
f1 = (2*Precision*Recall)/(Precision + Recall)
print("F1 Score: {:0.2f}".format(f1))

#Specificity 
Specificity = tn/(tn+fp)
print("Specificity: {:0.2f}".format(Specificity))

"""#Accuracy on Logistic train data"""

#On Train Data
from sklearn.linear_model import LogisticRegression
logmodel = LogisticRegression()
logmodel.fit(X_train,y_train)
train_pred=logmodel.predict(X_train)



from sklearn.metrics import classification_report
print('Classification Report')
print(classification_report(y_train,train_pred))
print('------------------------------------------------------------------------------------------------')


from sklearn.metrics import confusion_matrix
print('Confusion Matrix')
print(confusion_matrix(y_train, train_pred))             #Confusion metrics    test_pred=y_predict
print('------------------------------------------------------------------------------------------------')



#extracting true_positives, false_positives, true_negatives, false_negatives
tn, fp, fn, tp = confusion_matrix(y_train, train_pred).ravel()
print("True Negatives: ",tn)
print("False Positives: ",fp)
print("False Negatives: ",fn)
print("True Positives: ",tp)
print('------------------------------------------------------------------------------------------------')
#Accuracy
Accuracy = (tn+tp)*100/(tp+tn+fp+fn) 
print("Accuracy: {:0.2f}%".format(Accuracy))

#Precision 
Precision = tp/(tp+fp) 
print("Precision: {:0.2f}".format(Precision))

#Recall 
Recall = tp/(tp+fn) 
print("Recall: {:0.2f}".format(Recall))

#F1 Score
f1 = (2*Precision*Recall)/(Precision + Recall)
print("F1 Score: {:0.2f}".format(f1))

#Specificity 
Specificity = tn/(tn+fp)
print("Specificity: {:0.2f}".format(Specificity))

"""#Decision Tree"""

from sklearn.model_selection import train_test_split 
from sklearn import tree
X_train, X_test, y_train, y_test = train_test_split(casino_data.drop(['Q9_T'],axis=1), casino_data['Q9_T'], test_size=0.2)

"""Tree building and validation"""

clf1 = tree.DecisionTreeClassifier()
clf1.fit(X_train,y_train)

#If we want to see the predictive values we can do this by:
#predict1 = clf1.predict(y_train)
print('Train Accuracy:',clf1.score(X_train,y_train))

print('Test Accuracy:',clf1.score(X_test,y_test))
#This model with default parameters is giving us accuracy of 98.50% on training and 84.44% 
#It is overfitted model with defalut parameters
print('Model is overfitted')

"""Let's make a model by chnaging the parameters."""

clf2 = tree.DecisionTreeClassifier( max_depth=20, 
                                   min_samples_leaf=6, 
                                   max_leaf_nodes=10)
clf2.fit(X_train,y_train)

print('Train Accuracy:',clf2.score(X_train,y_train))
print('Test Accuracy:',clf2.score(X_test,y_test))

"""Tunning the hyperparameter  for getting more accuracy"""

clf3 = tree.DecisionTreeClassifier( max_depth=10, 
                                   min_samples_leaf=50, 
                                   max_leaf_nodes=40)
clf3.fit(X_train,y_train)

print('Train Accuracy: ',clf3.score(X_train,y_train))
print('Test Accuracy: ',clf3.score(X_test,y_test))

"""#  Random Forest And Boosting"""

from sklearn import tree

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(casino_data.drop(['Q9_T'],axis=1), casino_data['Q9_T'], test_size=0.2)

"""Building Random Forest Model"""

from sklearn.ensemble import RandomForestClassifier
forest=RandomForestClassifier(n_estimators=10,  min_samples_split=2, min_samples_leaf=1)    #n_estimators=number of tree

"""First Model"""

forest.fit(X_train,y_train)

print('Train Accuracy: ',forest.score(X_train,y_train))
print('Test Accuracy: ',forest.score(X_test,y_test))
print('Model is overfitted')

"""Second Model"""

forest1=RandomForestClassifier(n_estimators=1000,max_features=9, min_samples_split=17, min_samples_leaf=1)
forest1.fit(X_train,y_train)
print('Train Accuracy: ',forest1.score(X_train,y_train))
print('Test Accuracy: ',forest1.score(X_test,y_test))

"""Third Model"""

forest2=RandomForestClassifier(n_estimators=300,max_features=4, min_samples_split=2, min_samples_leaf=7)
forest2.fit(X_train,y_train)
print('Train Accuracy: ',forest2.score(X_train,y_train))
print('Test Accuracy: ',forest2.score(X_test,y_test))

"""#Boosting"""

###buildng Decision tree on the training data ####
from sklearn import tree

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(casino_data.drop(['Q9_T'],axis=1), casino_data['Q9_T'], test_size=0.2)

"""Gradient Boosting

Model 1
"""

###Building a gradient boosting clssifier ###
from sklearn import ensemble
from sklearn.ensemble import GradientBoostingClassifier         #GBM model iteration
boost=GradientBoostingClassifier(loss='deviance', 
                                 learning_rate=0.1, 
                                 n_estimators=100, #Number of iterations
                                 min_samples_leaf=5,  
                                 max_depth=3,  
                                 verbose=1)

##calculating the time while fitting the Gradient boosting classifier
import datetime
start_time = datetime.datetime.now()
##fitting the gradient boost classifier
boost.fit(X_train,y_train)
end_time = datetime.datetime.now()
print(end_time-start_time)

print(boost.score(X_train,y_train))
print(boost.score(X_test,y_test))

"""Model 2"""

boost1=GradientBoostingClassifier(loss='deviance', 
                                 learning_rate=0.1, 
                                 n_estimators=400, #Number of iterations
                                 min_samples_leaf=5,  
                                 max_depth=3,  
                                 verbose=1) 

import datetime
start_time = datetime.datetime.now()

##fitting the gradient boost classifier
boost1.fit(X_train,y_train)
end_time = datetime.datetime.now()
print(end_time-start_time)
print('Train Accuracy:  ',boost1.score(X_train,y_train))
print('Test Accudacy: ',boost1.score(X_test,y_test))

"""Model 3"""

boost2=GradientBoostingClassifier(loss='deviance', 
                                 learning_rate=0.1, 
                                 n_estimators=152, #Number of iterations
                                 min_samples_leaf=5,  
                                 max_depth=2,  
                                 verbose=1) 

import datetime
start_time = datetime.datetime.now()

##fitting the gradient boost classifier
boost2.fit(X_train,y_train)
end_time = datetime.datetime.now()
print(end_time-start_time)
print('Train Accuracy:',boost2.score(X_train,y_train))
print('Test Accuracy:',boost2.score(X_test,y_test))

"""#Each Model With Accuracy:

##Logistic Model:
Train Accuracy: 89.32%

Test Accuracy:88.94%

##Decision Tree:

Train Accuracy:  88.14%

Test Accuracy:  87.22

##Random Forest :

Train Accuracy: 90.66%

Test Accuracy: 89.05%


##Boosting:

Train Accuracy:   89.64%

Test Accudacy:  89.22%

#Conclusion :
In all the model the boosting is best model for this data with less difference between train and test
"""

























